# title_ausente_sheet_SEMANTICO.py - Sistema de Valida√ß√£o Sem√¢ntica Completo

import pandas as pd
from exporters.base_exporter import BaseSheetExporter
from urllib.parse import urlparse
import re

class TitleAusenteSheetSemantico(BaseSheetExporter):
    def export(self):
        """üìã Sistema de Valida√ß√£o Sem√¢ntica: F√≠sico ‚Üí T√©cnico ‚Üí Sem√¢ntico"""
        try:
            rows = []
            
            # üö´ FILTROS: Remove pagina√ß√µes e p√°ginas com erro
            df_filtrado = self.df[~self.df["url"].str.contains(r"\?page=\d+", na=False)].copy()
            df_filtrado = df_filtrado[~df_filtrado["url"].str.contains(r"&page=\d+", na=False)]
            
            # üö´ FILTRO: S√≥ p√°ginas funcionais (200 e 3xx)
            status_col = 'status_code_http' if 'status_code_http' in df_filtrado.columns else 'status_code'
            if status_col in df_filtrado.columns:
                df_filtrado = df_filtrado[
                    (df_filtrado[status_col] == 200) | 
                    (df_filtrado[status_col].astype(str).str.startswith('3'))
                ].copy()
                print(f"   üîç Analisando {len(df_filtrado)} URLs funcionais (200 e 3xx)")
            
            for _, row in df_filtrado.iterrows():
                url = row.get('url', '')
                title = row.get('title', '')
                status_code = row.get('status_code_http', row.get('status_code', 'N/A'))
                
                # Pula p√°ginas com erro (seguran√ßa extra)
                if status_code not in [200] and not str(status_code).startswith('3'):
                    continue
                
                # üéØ MATRIZ DE VALIDA√á√ÉO SEM√ÇNTICA
                resultado_validacao = self._validar_title_semantico(title, url)
                
                if resultado_validacao['tem_problema']:
                    # üîç AN√ÅLISE DE CONTEXTO DA URL
                    tipo_pagina = self._inferir_tipo_pagina(url)
                    prioridade_correcao = self._calcular_prioridade(tipo_pagina, status_code, resultado_validacao['tipo_problema'])
                    impacto_seo = self._calcular_impacto_seo(resultado_validacao['tipo_problema'], tipo_pagina)
                    recomendacao = self._gerar_recomendacao_semantica(resultado_validacao, tipo_pagina, url)
                    
                    rows.append({
                        'URL': url,
                        'Status_HTTP': status_code,
                        'Tipo_Problema': resultado_validacao['tipo_problema'],
                        'Categoria_Validacao': resultado_validacao['categoria'],
                        'Problema_Detectado': resultado_validacao['descricao'],
                        'Title_Atual': resultado_validacao['title_display'],
                        'Tamanho_Title': resultado_validacao['tamanho'],
                        'Score_Semantico': resultado_validacao['score_semantico'],
                        'Tipo_Pagina': tipo_pagina,
                        'Gravidade': resultado_validacao['gravidade'],
                        'Prioridade_Correcao': prioridade_correcao,
                        'Impacto_SEO': impacto_seo,
                        'Recomendacao': recomendacao,
                        'Detalhes_Tecnico': resultado_validacao['detalhes_tecnico']
                    })
            
            # Se n√£o encontrou problemas
            if not rows:
                df_vazio = pd.DataFrame(columns=[
                    'URL', 'Status_HTTP', 'Tipo_Problema', 'Categoria_Validacao', 'Problema_Detectado',
                    'Title_Atual', 'Tamanho_Title', 'Score_Semantico', 'Tipo_Pagina', 'Gravidade',
                    'Prioridade_Correcao', 'Impacto_SEO', 'Recomendacao', 'Detalhes_Tecnico'
                ])
                df_vazio.to_excel(self.writer, index=False, sheet_name="Title_Ausente")
                print(f"‚úÖ Valida√ß√£o sem√¢ntica: Todos os t√≠tulos est√£o adequados!")
                return df_vazio
            
            df_problemas = pd.DataFrame(rows)
            
            # üîÑ ORDENA√á√ÉO POR MATRIZ SEM√ÇNTICA
            categoria_order = {
                'FISICO': 0,        # Mais cr√≠tico - aus√™ncia f√≠sica
                'TECNICO': 1,       # Cr√≠tico - problemas t√©cnicos
                'SEMANTICO': 2      # Importante - problemas de qualidade
            }
            
            tipo_order = {
                'AUSENTE': 0,              # F√≠sico
                'NULO': 1,                 # F√≠sico
                'VAZIO': 2,                # F√≠sico
                'PLACEHOLDER_JS': 3,       # T√©cnico
                'PLACEHOLDER_GENERICO': 4, # T√©cnico
                'INVALIDO_SEMANTICO': 5,   # Sem√¢ntico
                'CURTO_DEMAIS': 6,         # Sem√¢ntico
                'GENERICO_DEMAIS': 7       # Sem√¢ntico
            }
            
            prioridade_order = {'MAXIMA': 0, 'ALTA': 1, 'MEDIA': 2, 'BAIXA': 3}
            gravidade_order = {'CRITICO': 0, 'ALTO': 1, 'MEDIO': 2, 'BAIXO': 3}
            
            df_problemas['categoria_sort'] = df_problemas['Categoria_Validacao'].map(categoria_order)
            df_problemas['tipo_sort'] = df_problemas['Tipo_Problema'].map(tipo_order)
            df_problemas['prioridade_sort'] = df_problemas['Prioridade_Correcao'].map(prioridade_order)
            df_problemas['gravidade_sort'] = df_problemas['Gravidade'].map(gravidade_order)
            
            # Ordena por: categoria ‚Üí tipo ‚Üí prioridade ‚Üí gravidade ‚Üí score ‚Üí URL
            df_problemas = df_problemas.sort_values([
                'categoria_sort',     # 1. F√≠sico ‚Üí T√©cnico ‚Üí Sem√¢ntico
                'tipo_sort',          # 2. Tipo espec√≠fico do problema
                'prioridade_sort',    # 3. Prioridade da p√°gina
                'gravidade_sort',     # 4. Gravidade do problema
                'Score_Semantico',    # 5. Score sem√¢ntico (ASC = pior primeiro)
                'URL'                 # 6. URLs alfab√©ticas
            ], ascending=[True, True, True, True, True, True])
            
            # Remove colunas auxiliares
            df_problemas = df_problemas.drop(['categoria_sort', 'tipo_sort', 'prioridade_sort', 'gravidade_sort'], axis=1, errors='ignore')
            
            # Reordena colunas para melhor visualiza√ß√£o
            colunas_ordenadas = [
                'URL', 'Status_HTTP', 'Categoria_Validacao', 'Tipo_Problema', 
                'Problema_Detectado', 'Score_Semantico', 'Prioridade_Correcao', 'Gravidade',
                'Tipo_Pagina', 'Title_Atual', 'Tamanho_Title', 'Impacto_SEO',
                'Recomendacao', 'Detalhes_Tecnico'
            ]
            
            df_problemas = df_problemas[colunas_ordenadas]
            
            df_problemas.to_excel(self.writer, index=False, sheet_name="Title_Ausente")
            
            # üìä ESTAT√çSTICAS DA MATRIZ SEM√ÇNTICA
            self._exibir_estatisticas_semanticas(df_problemas)
            
            return df_problemas
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na valida√ß√£o sem√¢ntica: {e}")
            df_vazio = pd.DataFrame(columns=[
                'URL', 'Status_HTTP', 'Categoria_Validacao', 'Tipo_Problema', 'Problema_Detectado',
                'Title_Atual', 'Tamanho_Title', 'Score_Semantico', 'Tipo_Pagina', 'Gravidade',
                'Prioridade_Correcao', 'Impacto_SEO', 'Recomendacao', 'Detalhes_Tecnico'
            ])
            df_vazio.to_excel(self.writer, index=False, sheet_name="Title_Ausente")
            return df_vazio
    
    def _validar_title_semantico(self, title, url):
        """üéØ Matriz de Valida√ß√£o Sem√¢ntica: F√≠sico ‚Üí T√©cnico ‚Üí Sem√¢ntico"""
        
        # üìä N√çVEL 1: VALIDA√á√ÉO F√çSICA (aus√™ncia total)
        if title is None:
            return {
                'tem_problema': True,
                'categoria': 'FISICO',
                'tipo_problema': 'NULO',
                'gravidade': 'CRITICO',
                'descricao': 'Title √© None/null no sistema',
                'title_display': '[NULL]',
                'tamanho': 0,
                'score_semantico': 0,
                'detalhes_tecnico': 'Campo title retornou None/null'
            }
        
        if not isinstance(title, str):
            title_str = str(title).strip()
            if title_str in ['', 'nan', 'None', 'null']:
                return {
                    'tem_problema': True,
                    'categoria': 'FISICO',
                    'tipo_problema': 'AUSENTE',
                    'gravidade': 'CRITICO',
                    'descricao': 'Title n√£o √© string v√°lida',
                    'title_display': f'[{title_str}]',
                    'tamanho': 0,
                    'score_semantico': 0,
                    'detalhes_tecnico': f'Tipo: {type(title)}, Valor: {title_str}'
                }
            title = title_str
        
        title_limpo = title.strip()
        
        if not title_limpo:
            return {
                'tem_problema': True,
                'categoria': 'FISICO',
                'tipo_problema': 'VAZIO',
                'gravidade': 'CRITICO',
                'descricao': 'Title √© string vazia ou apenas espa√ßos',
                'title_display': '[VAZIO]',
                'tamanho': len(title),
                'score_semantico': 0,
                'detalhes_tecnico': f'String original: "{title}"'
            }
        
        # üîß N√çVEL 2: VALIDA√á√ÉO T√âCNICA (placeholders e problemas t√©cnicos)
        validacao_tecnica = self._validar_nivel_tecnico(title_limpo)
        if validacao_tecnica['tem_problema']:
            return validacao_tecnica
        
        # üéØ N√çVEL 3: VALIDA√á√ÉO SEM√ÇNTICA (qualidade para SEO)
        return self._validar_nivel_semantico(title_limpo, url)
    
    def _validar_nivel_tecnico(self, title):
        """üîß Valida√ß√£o T√©cnica: Placeholders e problemas t√©cnicos"""
        title_lower = title.lower().strip()
        
        # ü§ñ PLACEHOLDERS DE JAVASCRIPT/FRAMEWORKS
        placeholders_js = [
            'app', 'react app', 'vue app', 'angular app',
            'loading', 'carregando', 'loader', 'preloader',
            'initializing', 'starting', 'booting', 'init',
            'component', 'widget', 'module', 'main', 'index',
            'undefined', 'null', 'empty', 'blank'
        ]
        
        if title_lower in placeholders_js:
            return {
                'tem_problema': True,
                'categoria': 'TECNICO',
                'tipo_problema': 'PLACEHOLDER_JS',
                'gravidade': 'ALTO',
                'descricao': 'Title √© placeholder de JavaScript/Framework',
                'title_display': title,
                'tamanho': len(title),
                'score_semantico': 10,
                'detalhes_tecnico': f'Placeholder JS detectado: "{title_lower}"'
            }
        
        # üè∑Ô∏è PLACEHOLDERS GEN√âRICOS
        placeholders_genericos = [
            'title', 'p√°gina', 'page', 'site', 'website',
            'untitled', 'sem t√≠tulo', 'no title', 'sem nome',
            'document', 'documento', 'html', 'web page',
            'default', 'padr√£o', 'template', 'modelo'
        ]
        
        if title_lower in placeholders_genericos:
            return {
                'tem_problema': True,
                'categoria': 'TECNICO',
                'tipo_problema': 'PLACEHOLDER_GENERICO',
                'gravidade': 'ALTO',
                'descricao': 'Title √© placeholder gen√©rico sem valor',
                'title_display': title,
                'tamanho': len(title),
                'score_semantico': 15,
                'detalhes_tecnico': f'Placeholder gen√©rico: "{title_lower}"'
            }
        
        # üîç PADR√ïES SUSPEITOS
        if len(title_lower) <= 3 and not any(c.isalpha() for c in title_lower):
            return {
                'tem_problema': True,
                'categoria': 'TECNICO',
                'tipo_problema': 'PLACEHOLDER_JS',
                'gravidade': 'ALTO',
                'descricao': 'Title muito curto sem letras (suspeito)',
                'title_display': title,
                'tamanho': len(title),
                'score_semantico': 5,
                'detalhes_tecnico': f'Apenas {len(title)} caracteres, sem letras'
            }
        
        return {'tem_problema': False}
    
    def _validar_nivel_semantico(self, title, url):
        """üéØ Valida√ß√£o Sem√¢ntica: Qualidade do t√≠tulo para SEO"""
        title_lower = title.lower().strip()
        
        # üìè T√çTULOS MUITO CURTOS (sem valor sem√¢ntico)
        if len(title) < 10:
            return {
                'tem_problema': True,
                'categoria': 'SEMANTICO',
                'tipo_problema': 'CURTO_DEMAIS',
                'gravidade': 'MEDIO',
                'descricao': f'Title muito curto ({len(title)} caracteres) para SEO',
                'title_display': title,
                'tamanho': len(title),
                'score_semantico': 20 + len(title),  # Score baseado no tamanho
                'detalhes_tecnico': f'M√≠nimo recomendado: 30-60 caracteres'
            }
        
        # üè† T√çTULOS INV√ÅLIDOS SEMANTICAMENTE
        titulos_invalidos_semanticos = [
            # Homepage gen√©rica
            'home', 'in√≠cio', 'inicial', 'principal',
            'p√°gina inicial', 'p√°gina principal', 'main page',
            'welcome', 'bem-vindo', 'bem-vindos',
            
            # Navega√ß√£o gen√©rica
            'voltar', 'back', 'anterior', 'pr√≥ximo', 'next',
            'menu', 'navigation', 'navega√ß√£o',
            
            # Conte√∫do gen√©rico
            'conte√∫do', 'content', 'texto', 'text',
            'informa√ß√£o', 'information', 'info',
            'dados', 'data', 'detalhes', 'details',
            
            # A√ß√µes gen√©ricas
            'clique aqui', 'click here', 'saiba mais', 'leia mais',
            'ver mais', 'veja mais', 'continue', 'continuar'
        ]
        
        # Verifica t√≠tulos exatos
        if title_lower in titulos_invalidos_semanticos:
            return {
                'tem_problema': True,
                'categoria': 'SEMANTICO',
                'tipo_problema': 'INVALIDO_SEMANTICO',
                'gravidade': 'MEDIO',
                'descricao': 'Title semanticamente inv√°lido para SEO',
                'title_display': title,
                'tamanho': len(title),
                'score_semantico': 30,
                'detalhes_tecnico': f'T√≠tulo gen√©rico sem valor SEO: "{title_lower}"'
            }
        
        # üîç T√çTULOS GEN√âRICOS DEMAIS (cont√©m apenas palavras gen√©ricas)
        palavras_genericas = [
            'empresa', 'company', 'neg√≥cio', 'business',
            'servi√ßo', 'service', 'produto', 'product',
            'loja', 'store', 'shop', 'site', 'website',
            'portal', 'sistema', 'system', 'plataforma', 'platform'
        ]
        
        # Verifica se o t√≠tulo √© s√≥ empresa + palavra gen√©rica
        palavras_title = re.findall(r'\b\w+\b', title_lower)
        if len(palavras_title) <= 3:  # T√≠tulos muito simples
            palavras_nao_genericas = [p for p in palavras_title if p not in palavras_genericas]
            if len(palavras_nao_genericas) <= 1:  # S√≥ 1 palavra espec√≠fica ou menos
                return {
                    'tem_problema': True,
                    'categoria': 'SEMANTICO',
                    'tipo_problema': 'GENERICO_DEMAIS',
                    'gravidade': 'MEDIO',
                    'descricao': 'Title gen√©rico demais, baixo valor para SEO',
                    'title_display': title,
                    'tamanho': len(title),
                    'score_semantico': 40,
                    'detalhes_tecnico': f'Apenas {len(palavras_nao_genericas)} palavra(s) espec√≠fica(s)'
                }
        
        # ‚úÖ T√çTULO APROVADO NA VALIDA√á√ÉO SEM√ÇNTICA
        # Calcula score baseado na qualidade
        score = self._calcular_score_semantico(title, url)
        
        return {
            'tem_problema': False,
            'score_semantico': score
        }
    
    def _calcular_score_semantico(self, title, url):
        """üìä Calcula score sem√¢ntico do t√≠tulo (0-100, maior = melhor)"""
        score = 50  # Base
        
        # Tamanho ideal (30-60 caracteres)
        tamanho = len(title)
        if 30 <= tamanho <= 60:
            score += 20
        elif 20 <= tamanho < 30 or 60 < tamanho <= 80:
            score += 10
        elif tamanho < 20 or tamanho > 80:
            score -= 10
        
        # Tem separador (| - :)
        if any(sep in title for sep in ['|', '-', ':', '‚Ä¢']):
            score += 15
        
        # N√£o √© apenas mai√∫scula
        if not title.isupper():
            score += 10
        
        # Tem palavras-chave espec√≠ficas (n√£o gen√©ricas)
        palavras = re.findall(r'\b\w{3,}\b', title.lower())
        palavras_especificas = len([p for p in palavras if p not in [
            'empresa', 'company', 'site', 'p√°gina', 'page', 'home'
        ]])
        score += min(palavras_especificas * 5, 20)
        
        return min(max(score, 0), 100)
    
    def _inferir_tipo_pagina(self, url):
        """üîç Infere tipo da p√°gina pela URL"""
        parsed_url = urlparse(url)
        path_parts = [part for part in parsed_url.path.split('/') if part]
        url_lower = url.lower()
        
        if not path_parts or url.endswith('/'):
            return 'Homepage/Landing'
        elif any(keyword in url_lower for keyword in ['produto', 'product', 'item', '/p/']):
            return 'P√°gina de Produto'
        elif any(keyword in url_lower for keyword in ['categoria', 'category', 'collection', '/c/']):
            return 'P√°gina de Categoria'
        elif any(keyword in url_lower for keyword in ['blog', 'artigo', 'post', 'noticia', 'news']):
            return 'Conte√∫do/Blog'
        elif any(keyword in url_lower for keyword in ['contato', 'contact', 'sobre', 'about', 'quem-somos']):
            return 'P√°gina Institucional'
        elif any(keyword in url_lower for keyword in ['busca', 'search', 'pesquisa']):
            return 'P√°gina de Busca'
        elif any(keyword in url_lower for keyword in ['checkout', 'carrinho', 'cart', 'pagamento']):
            return 'P√°gina de Compra'
        else:
            return 'P√°gina Geral'
    
    def _calcular_prioridade(self, tipo_pagina, status_code, tipo_problema):
        """üéØ Calcula prioridade de corre√ß√£o"""
        # Base por tipo de p√°gina
        if tipo_pagina in ['Homepage/Landing', 'P√°gina de Produto']:
            prioridade_base = 'MAXIMA'
        elif tipo_pagina in ['P√°gina de Categoria', 'Conte√∫do/Blog']:
            prioridade_base = 'ALTA'
        elif tipo_pagina in ['P√°gina Institucional']:
            prioridade_base = 'MEDIA'
        else:
            prioridade_base = 'MEDIA'
        
        # Ajusta por tipo de problema
        if tipo_problema in ['AUSENTE', 'NULO', 'VAZIO']:
            return 'MAXIMA'  # Sempre m√°xima para problemas f√≠sicos
        elif tipo_problema in ['PLACEHOLDER_JS', 'PLACEHOLDER_GENERICO']:
            return 'ALTA' if prioridade_base in ['MAXIMA', 'ALTA'] else 'MEDIA'
        elif tipo_problema in ['INVALIDO_SEMANTICO']:
            return prioridade_base  # Mant√©m prioridade da p√°gina
        else:
            # Diminui um n√≠vel para problemas menos cr√≠ticos
            ordem = ['MAXIMA', 'ALTA', 'MEDIA', 'BAIXA']
            idx = ordem.index(prioridade_base)
            return ordem[min(idx + 1, len(ordem) - 1)]
    
    def _calcular_impacto_seo(self, tipo_problema, tipo_pagina):
        """üìä Calcula impacto SEO do problema"""
        if tipo_problema in ['AUSENTE', 'NULO', 'VAZIO']:
            return 'CRITICO - Title ausente impede indexa√ß√£o adequada pelo Google'
        elif tipo_problema in ['PLACEHOLDER_JS']:
            return 'ALTO - Title placeholder pode ser ignorado pelos buscadores'
        elif tipo_problema in ['PLACEHOLDER_GENERICO']:
            return 'ALTO - Title gen√©rico n√£o diferencia a p√°gina nos resultados'
        elif tipo_problema in ['INVALIDO_SEMANTICO']:
            if tipo_pagina in ['Homepage/Landing', 'P√°gina de Produto']:
                return 'ALTO - Title sem valor sem√¢ntico prejudica CTR e ranking'
            else:
                return 'MEDIO - Title pouco descritivo reduz relev√¢ncia'
        elif tipo_problema in ['CURTO_DEMAIS']:
            return 'MEDIO - Title curto desperdi√ßa espa√ßo valioso nos resultados'
        elif tipo_problema in ['GENERICO_DEMAIS']:
            return 'MEDIO - Title gen√©rico reduz diferencia√ß√£o nos SERPs'
        else:
            return 'BAIXO - Problema menor na otimiza√ß√£o'
    
    def _gerar_recomendacao_semantica(self, resultado, tipo_pagina, url):
        """üí° Gera recomenda√ß√£o baseada na valida√ß√£o sem√¢ntica"""
        tipo_problema = resultado['tipo_problema']
        categoria = resultado['categoria']
        
        if categoria == 'FISICO':
            return self._recomendacao_fisica(tipo_pagina)
        elif categoria == 'TECNICO':
            return self._recomendacao_tecnica(tipo_problema, tipo_pagina, resultado['title_display'])
        elif categoria == 'SEMANTICO':
            return self._recomendacao_semantica(tipo_problema, tipo_pagina, resultado['title_display'])
        else:
            return 'Revisar t√≠tulo para melhorar SEO'
    
    def _recomendacao_fisica(self, tipo_pagina):
        """üö® Recomenda√ß√µes para problemas f√≠sicos"""
        templates = {
            'Homepage/Landing': 'Nome da Empresa - Servi√ßos Principais | Palavras-chave',
            'P√°gina de Produto': 'Nome do Produto - Categoria | Nome da Empresa',
            'P√°gina de Categoria': 'Nome da Categoria - Produtos/Servi√ßos | Nome da Empresa',
            'Conte√∫do/Blog': 'T√≠tulo do Artigo | Nome do Site/Blog',
            'P√°gina Institucional': 'Nome da Se√ß√£o (Sobre, Contato, etc.) | Nome da Empresa'
        }
        
        template = templates.get(tipo_pagina, 'T√≠tulo Descritivo e √önico da P√°gina | Nome da Empresa')
        return f'URGENTE: Implementar <title>{template}</title> no HTML'
    
    def _recomendacao_tecnica(self, tipo_problema, tipo_pagina, title_atual):
        """üîß Recomenda√ß√µes para problemas t√©cnicos"""
        if tipo_problema == 'PLACEHOLDER_JS':
            return f'IMPORTANTE: Substituir "{title_atual}" por t√≠tulo definitivo no HTML inicial (server-side), n√£o via JavaScript'
        elif tipo_problema == 'PLACEHOLDER_GENERICO':
            return f'IMPORTANTE: Substituir "{title_atual}" por t√≠tulo espec√≠fico e descritivo da p√°gina'
        else:
            return 'Corrigir problema t√©cnico no t√≠tulo'
    
    def _recomendacao_semantica(self, tipo_problema, tipo_pagina, title_atual):
        """üéØ Recomenda√ß√µes para problemas sem√¢nticos"""
        if tipo_problema == 'INVALIDO_SEMANTICO':
            return f'MELHORAR: Substituir "{title_atual}" por t√≠tulo que descreva o conte√∫do espec√≠fico da p√°gina'
        elif tipo_problema == 'CURTO_DEMAIS':
            return f'EXPANDIR: T√≠tulo "{title_atual}" muito curto. Adicionar palavras-chave e contexto (ideal: 30-60 caracteres)'
        elif tipo_problema == 'GENERICO_DEMAIS':
            return f'ESPECIFICAR: T√≠tulo "{title_atual}" gen√©rico demais. Adicionar detalhes √∫nicos da p√°gina'
        else:
            return 'Otimizar t√≠tulo para melhorar SEO'
    
    def _exibir_estatisticas_semanticas(self, df_problemas):
        """üìä Exibe estat√≠sticas da valida√ß√£o sem√¢ntica"""
        total = len(df_problemas)
        print(f"‚úÖ Valida√ß√£o Sem√¢ntica conclu√≠da com {total} problemas encontrados:")
        
        # Por categoria
        categorias = df_problemas['Categoria_Validacao'].value_counts()
        for categoria, count in categorias.items():
            emoji = {'FISICO': 'üö®', 'TECNICO': 'üîß', 'SEMANTICO': 'üéØ'}
            print(f"   {emoji.get(categoria, 'üìã')} {categoria}: {count} problemas")
        
        # Por tipo de problema
        print(f"\nüìã Detalhamento por tipo:")
        tipos = df_problemas.groupby(['Categoria_Validacao', 'Tipo_Problema']).size()
        for (categoria, tipo), count in tipos.items():
            print(f"   ‚Ä¢ {tipo}: {count}")
        
        # Por prioridade
        prioridades = df_problemas['Prioridade_Correcao'].value_counts()
        print(f"\nüéØ Por prioridade de corre√ß√£o:")
        for prioridade, count in prioridades.items():
            emoji = {'MAXIMA': 'üî•', 'ALTA': '‚ö†Ô∏è', 'MEDIA': 'üìã', 'BAIXA': 'üí°'}
            print(f"   {emoji.get(prioridade, '‚Ä¢')} {prioridade}: {count}")
        
        # Score m√©dio
        if 'Score_Semantico' in df_problemas.columns:
            score_medio = df_problemas['Score_Semantico'].mean()
            print(f"\nüìä Score sem√¢ntico m√©dio dos problemas: {score_medio:.1f}/100")

print("üéâ SISTEMA DE VALIDA√á√ÉO SEM√ÇNTICA IMPLEMENTADO!")
print("üìã Matriz: F√≠sico ‚Üí T√©cnico ‚Üí Sem√¢ntico")
print("üéØ Categorias:")
print("   üö® F√çSICO: Ausente, Nulo, Vazio")
print("   üîß T√âCNICO: Placeholders JS, Placeholders Gen√©ricos")
print("   üéØ SEM√ÇNTICO: Inv√°lido, Curto, Gen√©rico demais")
print("üìä Score sem√¢ntico: 0-100 (maior = melhor qualidade)")